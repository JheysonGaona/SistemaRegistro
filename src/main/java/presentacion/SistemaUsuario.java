/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package presentacion;

import java.awt.Color;
import java.time.LocalDate;
import java.time.format.DateTimeParseException;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import modelo.Persona;
import negocio.PersonaServicio;

/**
 *
 * @author Jheyson Gaona
 */
public class SistemaUsuario extends javax.swing.JFrame {

    private PersonaServicio servicio;
    private final DefaultTableModel modelo;
    private List<Persona> listadoPersonas;
    
    // Crear borde de color rojo y negro para visualizar el formulario
    private final Border bordeRojo = BorderFactory.createLineBorder(Color.RED, 2);
    private final Border bordeNegro = BorderFactory.createLineBorder(Color.BLACK, 1);
    
    /**
     * Creates new form PersonUI
     */
    public SistemaUsuario() {
        initComponents();
        this.servicio = new PersonaServicio();
        
        // Se gestiona la accion de que la tabla no sea editable
        this.modelo = new DefaultTableModel(
            new String[] {"Nombre", "Apellido", "Cédula", "Correo electrónico",
                "Fecha de nacimiento", "Edad"}, 0
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // ninguna celda será editable
                return false;
            }
        };

        // Asignas el modelo a la tabla
        this.tbListUser.setModel(modelo);
        
        // Actualiza la tabla con todos los registros de los usuarios y
        // Se limpia el formulario para setear los botones
        ActualizarTablaRegistro();
        LimpiarFormulario();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblSystemUser = new javax.swing.JLabel();
        lblLastnameUser = new javax.swing.JLabel();
        txtLastnameUser = new javax.swing.JTextField();
        lblNameUser = new javax.swing.JLabel();
        txtNameUser = new javax.swing.JTextField();
        lblNumIdUser = new javax.swing.JLabel();
        txtNumIdUser = new javax.swing.JTextField();
        lblEmailUser = new javax.swing.JLabel();
        txtEmailUser = new javax.swing.JTextField();
        lblDateUser = new javax.swing.JLabel();
        btnRegisterUser = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbListUser = new javax.swing.JTable();
        txtDateUser = new javax.swing.JTextField();
        btnUpdateUser = new javax.swing.JButton();
        btnDeleteUser = new javax.swing.JButton();
        lblListUserRegister = new javax.swing.JLabel();
        btnClearUser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(0, 0));

        lblSystemUser.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblSystemUser.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblSystemUser.setText("SISTEMA USUARIO");

        lblLastnameUser.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblLastnameUser.setText("Apellido");

        txtLastnameUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtLastnameUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtLastnameUserActionPerformed(evt);
            }
        });

        lblNameUser.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblNameUser.setText("Nombre");

        txtNameUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtNameUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameUserActionPerformed(evt);
            }
        });

        lblNumIdUser.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblNumIdUser.setText("Número de cédula");

        txtNumIdUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtNumIdUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNumIdUserKeyTyped(evt);
            }
        });

        lblEmailUser.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblEmailUser.setText("Correo electrónico");

        txtEmailUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtEmailUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailUserActionPerformed(evt);
            }
        });

        lblDateUser.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDateUser.setText("Fecha de nacimiento (dd-mm-yyyy)");

        btnRegisterUser.setBackground(new java.awt.Color(0, 153, 51));
        btnRegisterUser.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnRegisterUser.setForeground(new java.awt.Color(255, 255, 255));
        btnRegisterUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnRegisterUser.setLabel("Registrar");
        btnRegisterUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterUserActionPerformed(evt);
            }
        });

        tbListUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tbListUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Nombre", "Apellido", "Cédula", "Correo electrónico", "Fecha de nacimiento", "Edad"
            }
        ));
        tbListUser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbListUserMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbListUser);

        txtDateUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        txtDateUser.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtDateUserKeyPressed(evt);
            }
        });

        btnUpdateUser.setBackground(new java.awt.Color(255, 153, 0));
        btnUpdateUser.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnUpdateUser.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdateUser.setText("Actualizar");
        btnUpdateUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnUpdateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateUserActionPerformed(evt);
            }
        });

        btnDeleteUser.setBackground(new java.awt.Color(255, 0, 0));
        btnDeleteUser.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDeleteUser.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteUser.setText("Eliminar");
        btnDeleteUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteUserActionPerformed(evt);
            }
        });

        lblListUserRegister.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblListUserRegister.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblListUserRegister.setText("LISTA DE USUARIOS REGISTRADOS");

        btnClearUser.setBackground(new java.awt.Color(0, 204, 204));
        btnClearUser.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnClearUser.setText("Limpiar");
        btnClearUser.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        btnClearUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblNumIdUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnUpdateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteUser, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClearUser, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblSystemUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNameUser, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                                    .addComponent(lblNameUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblLastnameUser, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtLastnameUser, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(txtNumIdUser)
                            .addComponent(btnRegisterUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDateUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblEmailUser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtEmailUser)
                            .addComponent(txtDateUser))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 676, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblListUserRegister, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSystemUser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblListUserRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblLastnameUser, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNameUser, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNameUser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtLastnameUser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblNumIdUser, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtNumIdUser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblEmailUser, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtEmailUser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblDateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRegisterUser, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnUpdateUser, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClearUser, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDeleteUser, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameUserActionPerformed

    private void txtLastnameUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtLastnameUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtLastnameUserActionPerformed

    private void btnRegisterUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterUserActionPerformed
        RegistrarNuevaPersona();
    }//GEN-LAST:event_btnRegisterUserActionPerformed

    private void txtEmailUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailUserActionPerformed
        
    }//GEN-LAST:event_txtEmailUserActionPerformed

    private void tbListUserMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbListUserMouseClicked
        LlenarFormularioDesdeTabla();
    }//GEN-LAST:event_tbListUserMouseClicked

    private void btnUpdateUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateUserActionPerformed
        ActualizarDatosPersona();
    }//GEN-LAST:event_btnUpdateUserActionPerformed

    private void btnDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteUserActionPerformed
        EliminarRegistroPersona();
    }//GEN-LAST:event_btnDeleteUserActionPerformed

    private void btnClearUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearUserActionPerformed
        LimpiarFormulario();
    }//GEN-LAST:event_btnClearUserActionPerformed

    private void txtDateUserKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDateUserKeyPressed
        String texto = this.txtDateUser.getText().replaceAll("[^\\d]", "");
        StringBuilder formateado = new StringBuilder();
        
        int len = texto.length();

        for (int i = 0; i < texto.length() && i < 8; i++) {
            formateado.append(texto.charAt(i));
            if ((i == 1 || i == 3)) {
                formateado.append("-");
            }
        }

        this.txtDateUser.setText(formateado.toString());
    }//GEN-LAST:event_txtDateUserKeyPressed

    private void txtNumIdUserKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNumIdUserKeyTyped
        char c = evt.getKeyChar();
        // Si es un caracter se consume solo acepta de 0-9
        if(!Character.isDigit(c)){
            evt.consume();
        }
    }//GEN-LAST:event_txtNumIdUserKeyTyped

    
    // Se emplea este metodo para poder registrar una nueva persona en la DB
    private void RegistrarNuevaPersona() {
        // Si el formulario esta lleno proceder a enviarlo a la capa de negocio
        if(ValidarFormulario()){           
            Persona nuevaPersona = GenerarDatosPersona();
            // Se valida si la persona no sea nula, si es asi acaba el metodo
            if(nuevaPersona == null) return;
            // [0] ya existe la persomna  [1] registro de persona exitoso
            // [2] Error interno [3] la persona es menor de edad
            int registro = servicio.AgregarNuevaPersona(nuevaPersona);
            switch (registro) {
                case 0:
                    MostrarMensajePanel("Ya existe la persona con ese número de cédula.",
                            "Advertencia", JOptionPane.WARNING_MESSAGE);
                    break;
                    
                case 1:
                    MostrarMensajePanel("Registro exitoso.",
                            "Información", JOptionPane.INFORMATION_MESSAGE);
                    // Se actualiza la tabla de registro y limpiar el formulario
                    ActualizarTablaRegistro();
                    LimpiarFormulario();
                    break;
                    
                case 2:
                    MostrarMensajePanel("Error interno, intentelo más tarde.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                    break;
                    
                case 3:
                    MostrarMensajePanel("El sistema solo permite registrar a mayores de edad.",
                            "Advertencia", JOptionPane.QUESTION_MESSAGE);
                    break;
            }
        }else{
            MostrarMensajePanel("Debe completar todos los campos obligatorios.",
                    "Advertencia", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    
    // Se emplea este metodo para poder actualizar la persona en la DB
    private void ActualizarDatosPersona(){
        // Se obtiene el id seleccionado de la tabla
        int filaSeleccionada = this.tbListUser.getSelectedRow();
            // Se valdia que la fila seleccionada sea superior a cero
            
            if (filaSeleccionada >= 0) {
                // Si el formulario esta lleno proceder a enviarlo a la capa de negocio
                if(ValidarFormulario()) {
                    Persona actualizarPersona = GenerarDatosPersona();
                    // Se valida si la persona no sea nula, si es asi acaba el metodo
                    if(actualizarPersona == null) return;
                    // Se obtiene el id de la persona
                    int idPersona = this.listadoPersonas.get(filaSeleccionada).getId();
                    boolean actualizado = this.servicio.ActualizarPersona(idPersona, actualizarPersona);
                
                    // Se verifica si la persona se a actualizado correctamente
                    if(actualizado){
                        MostrarMensajePanel("Registro actualizado.",
                                "Información", JOptionPane.INFORMATION_MESSAGE);
                        ActualizarTablaRegistro();
                        LimpiarFormulario();
                    }else{
                        MostrarMensajePanel("No se pudo actualizar el registro.",
                            "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
    }
    
    
    // Se emplea este metodo para poder eliminar la persona en la DB
    private void EliminarRegistroPersona(){
        // Se obtiene el id seleccionado de la tabla
        int filaSeleccionada = this.tbListUser.getSelectedRow();
        
        // Se valdia que la fila seleccionada sea superior a cero 
        if (filaSeleccionada >= 0) {
            // Confirmar antes de eliminar
            int confirmacion = JOptionPane.showConfirmDialog(null,
                    "¿Estás seguro de eliminar esta persona?",
                    "Confirmar eliminación",
                    JOptionPane.YES_NO_OPTION);

            // La confirmación ha sido exitosa
            if (confirmacion == JOptionPane.YES_OPTION) {
                int idPersona = this.listadoPersonas.get(filaSeleccionada).getId();
                boolean eliminado = this.servicio.EliminarPersonaPorId(idPersona);
                // Se ha elimando correctamente en la DB
                if (eliminado) {
                    MostrarMensajePanel("Persona eliminada correctamente.",
                            "", JOptionPane.INFORMATION_MESSAGE);
                    ActualizarTablaRegistro();
                    LimpiarFormulario();
                } else {
                    MostrarMensajePanel("No se pudo eliminar la persona.",
                            "", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }
    
    
    // Se emplea este metodo para poder generar los datos de la persona
    // tanto para cuando se crea como para cuando se actualiza
    private Persona GenerarDatosPersona(){
        Persona nuevaPersona = null;
        String nombre = this.txtNameUser.getText();
        String apellido = this.txtLastnameUser.getText();
        String numId = this.txtNumIdUser.getText();
        String correo = this.txtEmailUser.getText();
        String fechaNac = this.txtDateUser.getText();
        // Se genera un bloque try para que la fecha sea correcta
        try {
            String[] fechaSeparada = fechaNac.split("-");
            int dia = Integer.parseInt(fechaSeparada[0]);
            int mes = Integer.parseInt(fechaSeparada[1]);
            int anio = Integer.parseInt(fechaSeparada[2]);
            LocalDate fechaNacimiento = LocalDate.of(anio, mes, dia);

            nuevaPersona = new Persona(nombre, apellido, numId,
                correo, fechaNacimiento);
        }catch(DateTimeParseException ex){
            MostrarMensajePanel(ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        return nuevaPersona;
    }
    
    
    // Se emplea este metodo para poder generar los msm dentro de los paneles
    private void MostrarMensajePanel(String msm, String cabezera,  int tipoPanel) {
        JOptionPane.showMessageDialog(null, msm, cabezera, tipoPanel);
    }
    
    
    // Metodo que permite validar si el formulario se encuentra con registros
    private boolean ValidarFormulario(){
        // Pintar los bordes de cada caja de texto usando operador ternario
        this.txtNameUser.setBorder(this.txtNameUser.getText().isEmpty() ? this.bordeRojo: this.bordeNegro);
        this.txtLastnameUser.setBorder(this.txtLastnameUser.getText().isEmpty() ? this.bordeRojo: this.bordeNegro);
        this.txtNumIdUser.setBorder(this.txtNumIdUser.getText().isEmpty() ? this.bordeRojo: this.bordeNegro);
        this.txtEmailUser.setBorder(this.txtEmailUser.getText().isEmpty() ? this.bordeRojo: this.bordeNegro);
        this.txtDateUser.setBorder(this.txtDateUser.getText().isEmpty() ? this.bordeRojo: this.bordeNegro);
        
        // Devuelve verdad si esta completamente lleno, o falso si algo falta llenar
        return !(this.txtNameUser.getText().isEmpty() || this.txtLastnameUser.getText().isEmpty()
            || this.txtNumIdUser.getText().isEmpty() || this.txtEmailUser.getText().isEmpty()
            || this.txtDateUser.getText().isEmpty());
    }
    
    
    // Metodo que se emplea para poder actualizar los registros de la tabla
    private void ActualizarTablaRegistro(){
        // Limpia la tabla antes de llenarla
        this.modelo.setRowCount(0);

        this.listadoPersonas = this.servicio.ListarPersonas();
        // Ciclo repetitivo mejorado para llenar la tabla con registros
        for (Persona personaActual : this.listadoPersonas) {
            Object[] fila = new Object[] {
                personaActual.getNombre(),
                personaActual.getApellido(),
                personaActual.getNumIdentificacion(),
                personaActual.getCorreo(),
                personaActual.getFechaNacimiento().toString(),
                personaActual.getEdad()
            };
            this.modelo.addRow(fila);
        }
    }
    
    
    // Metodo que se emplea para poder llenar el formulario luego de selecionar
    // una columna de la tabla
    private void LlenarFormularioDesdeTabla() {
        int filaSeleccionada = this.tbListUser.getSelectedRow();

        // Se valida si se ha selecionado una fila positiva
        if (filaSeleccionada >= 0) {
            this.btnDeleteUser.setEnabled(true);
            this.btnUpdateUser.setEnabled(true);
            this.btnRegisterUser.setEnabled(false);

            // Obtiene los valores de cada columna según el índice
            String nombre = this.tbListUser.getValueAt(filaSeleccionada, 0).toString();
            String apellido = this.tbListUser.getValueAt(filaSeleccionada, 1).toString();
            String cedula = this.tbListUser.getValueAt(filaSeleccionada, 2).toString();
            String correo = this.tbListUser.getValueAt(filaSeleccionada, 3).toString();
            String fechaNacimiento = this.tbListUser.getValueAt(filaSeleccionada, 4).toString();

            // Asigna a tus campos de formulario
            this.txtNameUser.setText(nombre);
            this.txtLastnameUser.setText(apellido);
            this.txtNumIdUser.setText(cedula);
            this.txtEmailUser.setText(correo);
            this.txtDateUser.setText(fechaNacimiento);
        }
    }

    
    // Se emplea este metodo para poder limpiar el formulario
    private void LimpiarFormulario(){
        this.txtNameUser.setText("");
        this.txtLastnameUser.setText("");
        this.txtNumIdUser.setText("");
        this.txtEmailUser.setText("");
        this.txtDateUser.setText("");
        
        this.tbListUser.clearSelection();
        this.btnRegisterUser.setEnabled(true);
        this.btnDeleteUser.setEnabled(false);
        this.btnUpdateUser.setEnabled(false);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SistemaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SistemaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SistemaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SistemaUsuario.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SistemaUsuario().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearUser;
    private javax.swing.JButton btnDeleteUser;
    private javax.swing.JButton btnRegisterUser;
    private javax.swing.JButton btnUpdateUser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblDateUser;
    private javax.swing.JLabel lblEmailUser;
    private javax.swing.JLabel lblLastnameUser;
    private javax.swing.JLabel lblListUserRegister;
    private javax.swing.JLabel lblNameUser;
    private javax.swing.JLabel lblNumIdUser;
    private javax.swing.JLabel lblSystemUser;
    private javax.swing.JTable tbListUser;
    private javax.swing.JTextField txtDateUser;
    private javax.swing.JTextField txtEmailUser;
    private javax.swing.JTextField txtLastnameUser;
    private javax.swing.JTextField txtNameUser;
    private javax.swing.JTextField txtNumIdUser;
    // End of variables declaration//GEN-END:variables
}
